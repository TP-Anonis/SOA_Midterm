// H√†m ƒëƒÉng xu·∫•t
function logout() {
  localStorage.removeItem("accessToken");
  localStorage.removeItem("employeeCode");
  localStorage.removeItem("avatar");
  window.location.href = "DangNhap.html";
}

// H√†m ƒë·ªïi avatar
function changeAvatar(event) {
  const file = event.target.files[0];
  if (file) {
    const reader = new FileReader();
    reader.onload = function (e) {
      const newAvatar = e.target.result;
      document.getElementById("navbarAvatar").src = newAvatar;
      localStorage.setItem("avatar", newAvatar);
    };
    reader.readAsDataURL(file);
  }
}

// Hi·ªÉn th·ªã avatar v√† m√£ nh√¢n vi√™n khi trang t·∫£i
document.addEventListener("DOMContentLoaded", function () {
  const avatar = localStorage.getItem("avatar");
  const employeeCode = localStorage.getItem("employeeCode");
  if (avatar) {
    document.getElementById("navbarAvatar").src = avatar;
  }
  if (employeeCode) {
    document.getElementById("employeeCode").textContent = ` ${employeeCode}`;
  }
  renderTables();
});

// D·ªØ li·ªáu b√†n t·ª´ JS
let tables = JSON.parse(localStorage.getItem("tables")) || [
  { id: 1, seats: 2, status: "trong" },
  { id: 2, seats: 2, status: "trong" },
  { id: 3, seats: 4, status: "khach" },
  { id: 4, seats: 4, status: "trong" },
  { id: 5, seats: 4, status: "phucvu" },
  { id: 6, seats: 8, status: "trong" },
  { id: 7, seats: 6, status: "khach" },
  { id: 8, seats: 4, status: "phucvu" },
  { id: 9, seats: 8, status: "trong" },
  { id: 10, seats: 7, status: "khach" }
];

// Hi·ªÉn th·ªã danh s√°ch b√†n
function renderTables() {
  const tableContainer = document.getElementById("table-list");
  tableContainer.innerHTML = "";
  tables.forEach(table => {
    const statusText = {
      "trong": "Tr·ªëng üü¢",
      "phucvu": "ƒêang ph·ª•c v·ª• üü°",
      "khach": "ƒê√£ c√≥ kh√°ch üî¥"
    };
    const statusColor = table.status === "trong" ? "success" : table.status === "phucvu" ? "warning" : "danger";

    let actionButtons = "";
    if (table.status === "trong") {
      actionButtons = `<button class="btn btn-custom-edit" onclick="editTable(${table.id})">S·ª≠a</button>`;
    } else if (table.status === "phucvu") {
      actionButtons = `<button class="btn btn-custom-order" onclick="orderFood(${table.id})">ƒê·∫∑t M√≥n</button>`;
    } else if (table.status === "khach") {
      actionButtons = `<button class="btn btn-custom-edit" onclick="editTable(${table.id})">S·ª≠a</button>`;
    }

    tableContainer.innerHTML += `
      <div class="col-md-4 mb-3">
        <div class="card table-card">
          <div class="card-body">
            <div>
              <h5 class="card-title">B√†n ${table.id} - ${table.seats} gh·∫ø</h5>
              <p class="card-text"><span class="badge bg-${statusColor}">${statusText[table.status]}</span></p>
            </div>
            <div class="btn-group">
              ${actionButtons}
              <button class="btn btn-custom-delete" onclick="deleteTable(${table.id})">X√≥a</button>
            </div>
          </div>
        </div>
      </div>
    `;
  });
  localStorage.setItem("tables", JSON.stringify(tables));
}

// M·ªü modal th√™m b√†n m·ªõi
function openAddTableModal() {
  document.getElementById("newTableId").value = "";
  document.getElementById("newTableSeats").value = "";
  document.getElementById("newTableStatus").value = "trong";
  new bootstrap.Modal(document.getElementById("addTableModal")).show();
}

// Th√™m b√†n m·ªõi
function addNewTable() {
  const newId = parseInt(document.getElementById("newTableId").value);
  const newSeats = parseInt(document.getElementById("newTableSeats").value);
  const newStatus = document.getElementById("newTableStatus").value;

  if (!newId || !newSeats || newId <= 0 || newSeats <= 0) {
    alert("Vui l√≤ng nh·∫≠p s·ªë b√†n v√† s·ªë gh·∫ø h·ª£p l·ªá!");
    return;
  }

  if (tables.some(table => table.id === newId)) {
    alert("S·ªë b√†n ƒë√£ t·ªìn t·∫°i! Vui l√≤ng ch·ªçn s·ªë b√†n kh√°c.");
    return;
  }

  tables.push({ id: newId, seats: newSeats, status: newStatus });
  renderTables();
  bootstrap.Modal.getInstance(document.getElementById("addTableModal")).hide();
  alert("Th√™m b√†n m·ªõi th√†nh c√¥ng!");
}

// M·ªü modal c·∫≠p nh·∫≠t tr·∫°ng th√°i (cho b√†n tr·ªëng) - Kh√¥ng c√≤n d√πng
function openUpdateModal(id) {
  const table = tables.find(t => t.id === id);
  document.getElementById("tableId").value = table.id;
  document.getElementById("tableSeats").value = table.seats;
  document.getElementById("tableStatus").value = table.status;
  document.getElementById("updateTableModalLabel").textContent = "C·∫≠p nh·∫≠t tr·∫°ng th√°i b√†n " + table.id;
  document.getElementById("tableSeats").disabled = true;
  document.getElementById("tableStatus").disabled = false;
  document.querySelector("#updateTableForm button").textContent = "L∆∞u thay ƒë·ªïi";
  document.querySelector("#updateTableForm button").onclick = () => saveTableChanges();
  new bootstrap.Modal(document.getElementById("updateTableModal")).show();
}

// M·ªü modal thanh to√°n (tr√™n danh s√°ch b√†n) - Kh√¥ng c√≤n d√πng tr·ª±c ti·∫øp t·ª´ danh s√°ch
function openPaymentModal(id) {
  const table = tables.find(t => t.id === id);
  document.getElementById("tableId").value = table.id;
  document.getElementById("tableSeats").value = table.seats;
  document.getElementById("tableStatus").value = table.status;
  document.getElementById("updateTableModalLabel").textContent = "Thanh to√°n b√†n " + table.id;
  document.getElementById("tableSeats").disabled = true;
  document.getElementById("tableStatus").disabled = true;
  document.querySelector("#updateTableForm button").textContent = "X√°c nh·∫≠n Thanh to√°n";
  document.querySelector("#updateTableForm button").onclick = () => payTable();
  new bootstrap.Modal(document.getElementById("updateTableModal")).show();
}

// X√°c nh·∫≠n thanh to√°n v√† chuy·ªÉn tr·∫°ng th√°i b√†n v·ªÅ "tr·ªëng"
function payTable() {
  const tableId = parseInt(document.getElementById("tableId").value);
  const table = tables.find(t => t.id === tableId);
  if (table) {
    const orderIndex = orders.findIndex(o => o.table === tableId && o.status === "Ch∆∞a giao");
    if (orderIndex !== -1) {
      orders.splice(orderIndex, 1);
    }
    table.status = "trong";
    renderTables();
    bootstrap.Modal.getInstance(document.getElementById("updateTableModal")).hide();
    alert("Thanh to√°n th√†nh c√¥ng! B√†n ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t l·∫°i th√†nh tr·ªëng.");
  }
}

// M·ªü modal s·ª≠a b√†n
function editTable(id) {
  const table = tables.find(t => t.id === id);
  document.getElementById("tableId").value = table.id;
  document.getElementById("tableSeats").value = table.seats;
  document.getElementById("tableStatus").value = table.status;
  document.getElementById("updateTableModalLabel").textContent = "S·ª≠a th√¥ng tin b√†n";
  document.getElementById("tableSeats").disabled = false;
  document.getElementById("tableStatus").disabled = false;
  document.querySelector("#updateTableForm button").textContent = "L∆∞u thay ƒë·ªïi";
  document.querySelector("#updateTableForm button").onclick = () => saveTableChanges();
  new bootstrap.Modal(document.getElementById("updateTableModal")).show();
}

// L∆∞u thay ƒë·ªïi b√†n
function saveTableChanges() {
  const tableId = parseInt(document.getElementById("tableId").value);
  const newSeats = parseInt(document.getElementById("tableSeats").value);
  const newStatus = document.getElementById("tableStatus").value;
  const table = tables.find(t => t.id === tableId);
  if (table) {
    table.seats = newSeats;
    table.status = newStatus;
    renderTables();
    bootstrap.Modal.getInstance(document.getElementById("updateTableModal")).hide();
  }
}

// X√≥a b√†n
function deleteTable(id) {
  if (confirm("B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a b√†n n√†y?")) {
    tables = tables.filter(t => t.id !== id);
    renderTables();
  }
}

// D·ªØ li·ªáu m√≥n ƒÉn
const menuItems = [
  { name: "B√°nh Cu·ªën", price: 40000, img: "./img/BanhCuon.jpg", available: true },
  { name: "B√°nh M√¨", price: 25000, img: "./img/Banhmi.jpg", available: true },
  { name: "B√∫n B√≤", price: 40000, img: "./img/BunBo.jpg", available: false },
  { name: "B√°nh X√®o", price: 20000, img: "./img/BanhXeo.jpg", available: true },
  { name: "B√∫n ƒê·∫≠u", price: 80000, img: "./img/BunDau.jpg", available: false },
  { name: "B√∫n Ri√™u", price: 40000, img: "./img/BunRieu.jpg", available: true },
  { name: "Ch·∫£ Gi√≤", price: 40000, img: "./img/ChaGio.jpg", available: true },
  { name: "Ch√°o G√†", price: 40000, img: "./img/ChaoGa.jpg", available: true },
  { name: "C∆°m T·∫•m", price: 50000, img: "./img/Comtam.jpg", available: true },
  { name: "Ph·ªü", price: 50000, img: "./img/pho.webp", available: true }
];

const chefInvoices = [
  { tableId: 1, dishes: [{ name: "B√°nh Cu·ªën", quantity: 2, price: 40000 }, { name: "Ch·∫£ Gi√≤", quantity: 3, price: 35000 }], status: "ƒêang ch·∫ø bi·∫øn" },
  { tableId: 2, dishes: [{ name: "Ph·ªü", quantity: 1, price: 50000 }, { name: "C∆°m T·∫•m", quantity: 2, price: 45000 }], status: "ƒê√£ giao" },
  { tableId: 1, dishes: [{ name: "B√∫n B√≤ Hu·∫ø", quantity: 2, price: 55000 }, { name: "Nem R√°n", quantity: 1, price: 30000 }], status: "ƒê√£ giao" }
];

let selectedTable = "";
let cart = [];
let orders = [];

// D·ªØ li·ªáu l·ªãch s·ª≠ thanh to√°n
let paymentHistory = JSON.parse(localStorage.getItem("paymentHistory")) || [];

// L∆∞u v√†o localStorage khi c√≥ thay ƒë·ªïi
function savePaymentHistory() {
  localStorage.setItem("paymentHistory", JSON.stringify(paymentHistory));
}

function orderFood(tableId) {
  selectedTable = tableId;
  document.getElementById("selectedTable").innerText = tableId;
  renderMenu();
  new bootstrap.Modal(document.getElementById("orderModal")).show();
}

function renderMenu() {
  let menuHTML = "";
  menuItems.forEach((item, index) => {
    menuHTML += `
      <div class="col-md-4 col-lg-3 mb-4">
        <div class="card h-100 shadow-sm">
          <div class="position-relative">
            <img src="${item.img}" class="card-img-top" alt="${item.name}">
            ${item.available ? '' : `<div class="badge bg-danger position-absolute top-0 end-0 m-2">H·∫øt m√≥n</div>`}
          </div>
          <div class="card-body d-flex flex-column">
            <h5 class="card-title">${item.name}</h5>
            <p class="card-text fw-bold">${item.price.toLocaleString()}ƒë</p>
            <div class="mt-auto">
              <button class="btn btn-${item.available ? 'primary' : 'secondary'} w-100" 
                      onclick="addToCart(${index})" ${item.available ? '' : 'disabled'}>
                ${item.available ? 'Th√™m v√†o gi·ªè' : 'H·∫øt m√≥n'}
              </button>
            </div>
          </div>
        </div>
      </div>
    `;
  });
  document.getElementById("menu-container").innerHTML = menuHTML;
}

function addToCart(index) {
  if (!selectedTable) {
    alert("Vui l√≤ng ch·ªçn b√†n tr∆∞·ªõc khi ƒë·∫∑t m√≥n!");
    return;
  }
  let item = menuItems[index];
  let existing = cart.find(i => i.name === item.name);
  if (existing) {
    existing.quantity++;
  } else {
    cart.push({ ...item, quantity: 1 });
  }
  updateCart();
}

function updateCart() {
  let cartHTML = "";
  let total = 0;
  cart.forEach((item, i) => {
    total += item.price * item.quantity;
    cartHTML += `
      <li class="list-group-item d-flex justify-content-between align-items-center">
        <span>${item.name} x${item.quantity}</span>
        <span>${(item.price * item.quantity).toLocaleString()}ƒë</span>
        <button class="btn btn-sm btn-danger" onclick="removeFromCart(${i})">X√≥a</button>
      </li>
    `;
  });
  document.getElementById("cart-items").innerHTML = cartHTML;
  document.getElementById("cart-total").innerText = total.toLocaleString();
}

function removeFromCart(index) {
  cart.splice(index, 1);
  updateCart();
}

function placeOrder() {
  if (!selectedTable) {
    alert("Vui l√≤ng ch·ªçn b√†n tr∆∞·ªõc khi ƒë·∫∑t ƒë∆°n!");
    return;
  }
  if (cart.length === 0) {
    alert("Gi·ªè h√†ng ƒëang tr·ªëng! H√£y th√™m m√≥n tr∆∞·ªõc khi ƒë·∫∑t h√†ng.");
    return;
  }
  let now = new Date();
  let note = document.getElementById("order-note").value;
  let orderItems = cart.map(item => ({
    name: item.name,
    quantity: item.quantity
  }));
  let newOrder = {
    id: now.getTime(),
    table: parseInt(selectedTable),
    items: orderItems,
    status: "Ch∆∞a giao",
    orderTime: now.toLocaleString(),
    note: note
  };
  orders.push(newOrder);

  const table = tables.find(t => t.id === parseInt(selectedTable));
  if (table) {
    table.status = "phucvu";
  }

  alert("ƒê·∫∑t m√≥n th√†nh c√¥ng!");
  cart = [];
  updateCart();
  document.getElementById("order-note").value = "";
  bootstrap.Modal.getInstance(document.getElementById("orderModal")).hide();
  renderTables();
}

function renderTableList() {
  const tableListContainer = document.getElementById("tableList");
  tableListContainer.innerHTML = "";
  const tableIds = [...new Set(chefInvoices.map(invoice => invoice.tableId))];
  tableIds.forEach(tableId => {
    const btn = document.createElement("button");
    btn.className = "btn btn-outline-primary";
    btn.textContent = `B√†n ${tableId}`;
    btn.onclick = () => showOrderHistory(tableId);
    tableListContainer.appendChild(btn);
  });
}

function showOrderHistory(tableId) {
  document.getElementById("tableListContainer").style.display = "none";
  document.getElementById("orderDetailsContainer").style.display = "block";
  document.getElementById("paymentHistoryContainer").style.display = "none";
  document.getElementById("selectedTableTitle").textContent = `L·ªãch s·ª≠ ƒë∆°n h√†ng - B√†n ${tableId}`;
  const tableBody = document.getElementById("orderHistoryTableBody");
  tableBody.innerHTML = "";
  const ordersForTable = chefInvoices.filter(invoice => invoice.tableId === tableId);
  ordersForTable.forEach(invoice => {
    invoice.dishes.forEach(dish => {
      const row = document.createElement("tr");
      let statusColor = invoice.status === "ƒêang ch·∫ø bi·∫øn" ? "text-warning" : invoice.status === "ƒê√£ giao" ? "text-success" : "text-primary";
      row.innerHTML = `
        <td>${dish.name}</td>
        <td>${dish.quantity}</td>
        <td>${dish.price.toLocaleString()}ƒë</td>
        <td class="${statusColor} fw-bold">${invoice.status}</td>
      `;
      tableBody.appendChild(row);
    });
  });
  const paymentBtnRow = document.createElement("tr");
  paymentBtnRow.innerHTML = `
    <td colspan="4" class="text-end">
      <button class="btn btn-primary" onclick="openPaymentModalFromHistory(${tableId})">Thanh To√°n</button>
    </td>
  `;
  tableBody.appendChild(paymentBtnRow);
}

// Hi·ªÉn th·ªã modal ch·ªçn ph∆∞∆°ng th·ª©c thanh to√°n
function showPaymentMethodModal() {
  new bootstrap.Modal(document.getElementById("paymentMethodModal")).show();
}

// X√°c nh·∫≠n ph∆∞∆°ng th·ª©c thanh to√°n
function confirmPaymentMethod() {
  const selectedMethod = document.querySelector('#paymentMethodModal input[name="paymentMethod"]:checked').value;
  const tableId = parseInt(document.getElementById("paymentTableId").textContent);

  bootstrap.Modal.getInstance(document.getElementById("paymentMethodModal")).hide();

  if (selectedMethod === "cash") {
    showConfirmPaymentModal();
  } else if (selectedMethod === "bankTransfer") {
    document.getElementById("paymentDetails").style.display = "block";
  }
}

// M·ªü modal thanh to√°n t·ª´ l·ªãch s·ª≠
function openPaymentModalFromHistory(tableId) {
  const ordersForTable = chefInvoices.filter(invoice => invoice.tableId === tableId);
  document.getElementById("paymentTableId").textContent = tableId;
  document.getElementById("paymentTableIdNote").textContent = tableId;
  const tableBody = document.getElementById("paymentTableBody");
  tableBody.innerHTML = "";
  let total = 0;

  ordersForTable.forEach(invoice => {
    invoice.dishes.forEach(dish => {
      const dishTotal = dish.price * dish.quantity;
      total += dishTotal;
      const row = document.createElement("tr");
      row.innerHTML = `
        <td>${dish.name}</td>
        <td>${dish.quantity}</td>
        <td>${dish.price.toLocaleString()}ƒë</td>
        <td>${dishTotal.toLocaleString()}ƒë</td>
      `;
      tableBody.appendChild(row);
    });
  });

  document.getElementById("paymentTotal").textContent = total.toLocaleString();
  document.getElementById("paymentDetails").style.display = "none";
  document.getElementById("confirmPaymentBtn").style.display = "block";
  new bootstrap.Modal(document.getElementById("paymentModal")).show();
}

// Hi·ªÉn th·ªã modal x√°c nh·∫≠n thanh to√°n cu·ªëi c√πng
function showConfirmPaymentModal() {
  const tableId = document.getElementById("paymentTableId").textContent;
  document.getElementById("confirmTableIdModal").textContent = tableId;
  new bootstrap.Modal(document.getElementById("confirmPaymentModal")).show();
}

// Ho√†n t·∫•t thanh to√°n
function finalizePayment() {
  const tableId = parseInt(document.getElementById("paymentTableId").textContent);
  const ordersForTable = chefInvoices.filter(invoice => invoice.tableId === tableId);
  const total = parseInt(document.getElementById("paymentTotal").textContent.replace(/[^0-9]/g, ""));
  const paymentTime = new Date().toLocaleString();
  const selectedMethod = document.querySelector('#paymentMethodModal input[name="paymentMethod"]:checked')?.value || "cash";

  const paymentEntry = {
    tableId: tableId,
    total: total,
    dishes: ordersForTable.flatMap(invoice => invoice.dishes.map(dish => ({
      name: dish.name,
      quantity: dish.quantity,
      price: dish.price
    }))),
    paymentTime: paymentTime,
    method: selectedMethod
  };
  paymentHistory.push(paymentEntry);
  savePaymentHistory();

  ordersForTable.forEach(invoice => {
    invoice.status = "ƒê√£ thanh to√°n";
  });

  const table = tables.find(t => t.id === tableId);
  if (table) {
    table.status = "trong";
  }

  renderTables();
  alert(`Thanh to√°n ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n cho b√†n ${tableId} b·∫±ng ${selectedMethod === "cash" ? "ti·ªÅn m·∫∑t" : "chuy·ªÉn kho·∫£n"}!`);
  bootstrap.Modal.getInstance(document.getElementById("confirmPaymentModal")).hide();
  bootstrap.Modal.getInstance(document.getElementById("paymentModal")).hide();
}

function showOrderDetails() {
  document.getElementById("paymentHistoryContainer").style.display = "none";
  document.getElementById("orderDetailsContainer").style.display = "block";
}

function showTableList() {
  document.getElementById("orderDetailsContainer").style.display = "none";
  document.getElementById("paymentHistoryContainer").style.display = "none";
  document.getElementById("tableListContainer").style.display = "block";
}

document.getElementById("orderHistoryModal").addEventListener("show.bs.modal", renderTableList);