const menuItems = [
    { name: "B√°nh Cu·ªën", price: 40000, img: "./img/BanhCuon.jpg", available: true },
    { name: "B√°nh M√¨", price: 25000, img: "./img/Banhmi.jpg", available: true },
    { name: "B√∫n B√≤", price: 40000, img: "./img/BunBo.jpg", available: false },
    { name: "B√°nh X√®o", price: 20000, img: "./img/BanhXeo.jpg", available: true },
    { name: "B√∫n ƒê·∫≠u", price: 80000, img: "./img/BunDau.jpg", available: false },
    { name: "B√∫n Ri√™u", price: 40000, img: "./img/BunRieu.jpg", available: true },
    { name: "Ch·∫£ Gi√≤", price: 40000, img: "./img/ChaGio.jpg", available: true },
    { name: "Ch√°o G√†", price: 40000, img: "./img/ChaoGa.jpg", available: true },
    { name: "C∆°m T·∫•m", price: 50000, img: "./img/Comtam.jpg", available: true },
    { name: "Ph·ªü", price: 50000, img: "./img/pho.webp", available: true }
  ];
  const tables = [
    { id: 1, seats: 2, status: "trong" },
    { id: 2, seats: 2, status: "trong" },
    { id: 3, seats: 4, status: "khach" },
    { id: 4, seats: 4, status: "trong" },
    { id: 5, seats: 4, status: "phucvu" },
    { id: 6, seats: 8, status: "trong" },
    { id: 7, seats: 6, status: "khach" },
    { id: 8, seats: 4, status: "phucvu" },
    { id: 9, seats: 8, status: "trong" },
    { id: 10, seats: 7, status: "khach" }
];

const chefInvoices = [
    {
      tableId: 1,
      chef: "Chef Ho√†ng",
      dishes: [
        { name: "B√°nh Cu·ªën", quantity: 2, price: 40000 },
        { name: "Ch·∫£ Gi√≤", quantity: 3, price: 35000 }
      ],
      status: "ƒêang ch·∫ø bi·∫øn"
    },
    {
      tableId: 2,
      chef: "Chef Lan",
      dishes: [
        { name: "Ph·ªü", quantity: 1, price: 50000 },
        { name: "C∆°m T·∫•m", quantity: 2, price: 45000 }
      ],
      status: "ƒê√£ giao"
    },
    {
      tableId: 1,
      chef: "Chef Minh",
      dishes: [
        { name: "B√∫n B√≤ Hu·∫ø", quantity: 2, price: 55000 },
        { name: "Nem R√°n", quantity: 1, price: 30000 }
      ],
      status: "ƒê√£ giao"
    }
];
function renderTables() {
const tableContainer = document.getElementById("table-list");
tableContainer.innerHTML = "";

tables.forEach(table => {
const statusText = {
    "trong": "Tr·ªëng üü¢",
    "phucvu": "ƒêang ph·ª•c v·ª• üü°",
    "khach": "ƒê√£ c√≥ kh√°ch üî¥"
};

let orderButton = "";
if (table.status === "phucvu") {
    orderButton = `<button class="btn btn-success mt-2" onclick="orderFood(${table.id})">ƒê·∫∑t M√≥n</button>`;
}

tableContainer.innerHTML += `
    <div class="col-md-3 mb-3">
        <div class="card text-center">
            <div class="card-header">B√†n ${table.id} - ${table.seats} ng∆∞·ªùi</div>
            <div class="card-body">
            <p class="card-text">${statusText[table.status]}</p>
            <div class="d-grid gap-2">
                <button class="btn btn-primary" onclick="openUpdateModal(${table.id})">C·∫≠p nh·∫≠t</button>
                ${orderButton}
            </div>
        </div>

        </div>
    </div>
`;
});
}


function openUpdateModal(id) {
    const table = tables.find(t => t.id === id);
    document.getElementById("tableId").value = table.id;
    document.getElementById("tableStatus").value = table.status;
    new bootstrap.Modal(document.getElementById("updateTableModal")).show();
}

function saveTableStatus() {
const tableId = parseInt(document.getElementById("tableId").value);
const newStatus = document.getElementById("tableStatus").value;

const table = tables.find(t => t.id === tableId);
if (table) {
table.status = newStatus;
renderTables();
bootstrap.Modal.getInstance(document.getElementById("updateTableModal")).hide();
}
}

function orderFood(tableId) {
alert(`M·ªü trang ƒë·∫∑t m√≥n cho b√†n ${tableId}`);
// Chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang ƒë·∫∑t m√≥n
window.location.href = `./DatMon.html?table=${tableId}`;
}

renderTables();
  let selectedTable = "";
  let cart = [];
  let orders = [];
  
  function enableMenu() {
    selectedTable = document.getElementById("table-select").value;
    document.getElementById("menu-container").style.display = selectedTable ? "block" : "none";
  }
// H√†m render menu (gi·ªØ nguy√™n ho·∫∑c c·∫≠p nh·∫≠t theo code b·∫°n ƒë√£ c√≥)
function renderMenu() {
    let menuHTML = "";
    menuItems.forEach((item, index) => {
      menuHTML += `
        <div class="col-md-4 col-lg-3 mb-4">
          <div class="card h-100 shadow-sm">
            <div class="position-relative">
              <img src="${item.img}" class="card-img-top" alt="${item.name}">
              ${item.available ? '' : `<div class="badge bg-danger position-absolute top-0 end-0 m-2">H·∫øt h√†ng</div>`}
            </div>
            <div class="card-body d-flex flex-column">
              <h5 class="card-title">${item.name}</h5>
              <p class="card-text fw-bold">${item.price.toLocaleString()}ƒë</p>
              <div class="mt-auto">
                <button class="btn btn-${item.available ? 'primary' : 'secondary'} w-100" 
                        onclick="addToCart(${index})" ${item.available ? '' : 'disabled'}>
                  ${item.available ? 'Th√™m v√†o gi·ªè' : 'H·∫øt h√†ng'}
                </button>
              </div>
            </div>
          </div>
        </div>
      `;
    });
    document.getElementById("menu-container").innerHTML = menuHTML;
  }
  
  
  function addToCart(index) {
    if (!selectedTable) {
      alert("Vui l√≤ng ch·ªçn b√†n tr∆∞·ªõc khi ƒë·∫∑t m√≥n!");
      return;
    }
    let item = menuItems[index];
    let existing = cart.find(i => i.name === item.name);
    if (existing) {
      existing.quantity++;
    } else {
      cart.push({ ...item, quantity: 1 });
    }
    updateCart();
  }
  
  function updateCart() {
    let cartHTML = "";
    let total = 0;
    cart.forEach((item, i) => {
      total += item.price * item.quantity;
      cartHTML += `
        <li class="list-group-item d-flex justify-content-between align-items-center">
          <span>${item.name} x${item.quantity}</span>
          <span>${(item.price * item.quantity).toLocaleString()}ƒë</span>
          <button class="btn btn-sm btn-danger" onclick="removeFromCart(${i})">X√≥a</button>
        </li>
      `;
    });
    document.getElementById("cart-items").innerHTML = cartHTML;
    document.getElementById("cart-total").innerText = total.toLocaleString();
  }
  
  function removeFromCart(index) {
    cart.splice(index, 1);
    updateCart();
  }
  
  function placeOrder() {
    if (!selectedTable) {
      alert("Vui l√≤ng ch·ªçn b√†n tr∆∞·ªõc khi ƒë·∫∑t ƒë∆°n!");
      return;
    }
    
    if (cart.length === 0) {
      alert("Gi·ªè h√†ng ƒëang tr·ªëng! H√£y th√™m m√≥n tr∆∞·ªõc khi ƒë·∫∑t h√†ng.");
      return;
    }
    
    // L·∫•y th·ªùi gian hi·ªán t·∫°i
    let now = new Date();
    
    // L·∫•y n·ªôi dung ghi ch√∫ t·ª´ textarea
    let note = document.getElementById("order-note").value;
    
    let orderItems = cart.map(item => ({
      name: item.name,
      quantity: item.quantity
    }));
    
    let newOrder = {
      id: now.getTime(), // S·ª≠ d·ª•ng th·ªùi gian l√†m ID
      table: selectedTable,
      items: orderItems,
      status: "Ch∆∞a giao",
      orderTime: now.toLocaleString(), // L∆∞u th·ªùi gian ƒë·∫∑t m√≥n
      note: note // Ghi ch√∫ m√≥n ƒÉn
    };
    
    orders.push(newOrder);
    alert("ƒê·∫∑t h√†ng th√†nh c√¥ng!");
    // Sau khi ƒë·∫∑t h√†ng, l√†m tr·ªëng gi·ªè h√†ng v√† x√≥a n·ªôi dung ghi ch√∫ (n·∫øu c·∫ßn)
    cart = [];
    updateCart();
    renderOrders();
    
    // X√≥a n·ªôi dung ghi ch√∫ sau khi ƒë·∫∑t m√≥n (tu·ª≥ ch·ªçn)
    document.getElementById("order-note").value = "";
  }
  

// Gi·∫£ s·ª≠ h√†m orderFood ƒë∆∞·ª£c g·ªçi khi nh·∫•n n√∫t "ƒê·∫∑t m√≥n" t·ª´ trang b√†n
function orderFood(tableId) {
    selectedTable = tableId;
    document.getElementById("selectedTable").innerText = tableId;
    renderMenu();
    new bootstrap.Modal(document.getElementById("orderModal")).show();
  }
// Hi·ªÉn th·ªã danh s√°ch b√†n c√≥ ƒë∆°n h√†ng
function renderTableList() {
    const tableListContainer = document.getElementById("tableList");
    tableListContainer.innerHTML = "";
  
    // L·∫•y danh s√°ch b√†n c√≥ trong h√≥a ƒë∆°n
    const tableIds = [...new Set(chefInvoices.map(invoice => invoice.tableId))];
  
    // T·∫°o danh s√°ch n√∫t b√†n
    tableIds.forEach(tableId => {
      const btn = document.createElement("button");
      btn.className = "btn btn-outline-primary";
      btn.textContent = `B√†n ${tableId}`;
      btn.onclick = () => showOrderHistory(tableId);
      tableListContainer.appendChild(btn);
    });
  }
  
  function showOrderHistory(tableId) {
    document.getElementById("tableListContainer").style.display = "none";
    document.getElementById("orderDetailsContainer").style.display = "block";
    document.getElementById("selectedTableTitle").textContent = `L·ªãch s·ª≠ ƒë∆°n h√†ng - B√†n ${tableId}`;

    const tableBody = document.getElementById("orderHistoryTableBody");
    tableBody.innerHTML = "";

    const orders = chefInvoices.filter(invoice => invoice.tableId === tableId);

    orders.forEach(invoice => {
        invoice.dishes.forEach(dish => {
            const row = document.createElement("tr");

            // X√°c ƒë·ªãnh m√†u s·∫Øc cho tr·∫°ng th√°i
            let statusColor = invoice.status === "ƒêang ch·∫ø bi·∫øn" ? "text-warning" : "text-success";

            row.innerHTML = `
              <td>${invoice.chef}</td>
              <td>${dish.name}</td>
              <td>${dish.quantity}</td>
              <td>${dish.price.toLocaleString()}ƒë</td>
              <td class="${statusColor} fw-bold">${invoice.status}</td>
            `;
            tableBody.appendChild(row);
        });
    });
}
  
  // Hi·ªÉn th·ªã l·∫°i danh s√°ch b√†n
  function showTableList() {
    document.getElementById("orderDetailsContainer").style.display = "none";
    document.getElementById("tableListContainer").style.display = "block";
  }
  
  // G·ªçi h√†m khi m·ªü modal
  document.getElementById("orderHistoryModal").addEventListener("show.bs.modal", renderTableList);
  
  document.addEventListener("DOMContentLoaded", renderMenu);
  